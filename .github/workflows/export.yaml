name: Build & Export (All maps → tiles + indexes)

on:
  push:
    branches: [ "master" ]
  workflow_dispatch: {}

env:
  MAP_GLOB: maps/**/*.dmm     # adjust if your repo uses _maps/ as well
  OUT_DIR: data/minimaps
  TILE_DIR: data/tiles
  TILE: 512

jobs:
  export:
    runs-on: ubuntu-24.04
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build SpacemanDMM
        run: |
          set -eux
          git clone --depth=1 https://github.com/SpaceManiac/SpacemanDMM /tmp/SpacemanDMM
          cd /tmp/SpacemanDMM && cargo build --release --bin dmm-tools
          echo "/tmp/SpacemanDMM/target/release" >> $GITHUB_PATH
          dmm-tools --help | head -n1

      - name: Render minimaps (one PNG per Z for each .dmm)
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob globstar
          mkdir -p "$OUT_DIR"
          count=0
          for m in $MAP_GLOB; do
            rel="${m#./}"
            # map_id: path minus .dmm, with non-alnum replaced by _
            map_id="$(echo "$rel" | sed -E 's/^\.\///; s/\.dmm$//; s/[^A-Za-z0-9._-]+/_/g')"
            out_map="$OUT_DIR/$map_id"
            mkdir -p "$out_map"
            echo "Rendering $m → $out_map"
            dmm-tools minimap "$m" -o "$out_map"
            count=$((count+1))
          done
          [[ "$count" -gt 0 ]] || { echo "No maps matched: $MAP_GLOB"; exit 1; }
          find "$OUT_DIR" -type f -name '*.png' | head -n 20

      - name: Install ImageMagick + jq
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick jq
          /usr/bin/convert -version

      - name: Slice to ${TILE}x${TILE} tiles (row,col from top-left) + per-map index.json
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          mkdir -p "$TILE_DIR"

          for map_dir in "$OUT_DIR"/*; do
            [ -d "$map_dir" ] || continue
            # map_id mirrors the OUT_DIR subfolder
            map_id="$(basename "$map_dir")"
            map_src="$(echo "$map_id.dmm" | sed -E 's/_/\//g')" || true  # best-effort; not strictly needed
            zmeta='[]'

            for png in "$map_dir"/*.png; do
              base="$(basename "$png")"
              z="${base%.*}"; z="${z##*-}"               # YourMap-3.png -> 3
              out="$TILE_DIR/$map_id/z$z"
              mkdir -p "$out"

              # Crop into tiles named row,col.png with top-left origin; preserve RGBA; pad edges
              /usr/bin/convert "$png" \
                -colorspace sRGB -alpha on -type TrueColorAlpha -background none \
                -crop ${TILE}x${TILE} \
                -set filename:tile "%[fx:floor(page.y/${TILE})],%[fx:floor(page.x/${TILE})]" \
                +repage -gravity northwest -extent ${TILE}x${TILE} \
                +adjoin "$out/%[filename:tile].png"

              # Gather z-level metadata
              w=$(/usr/bin/identify -format '%w' "$png")
              h=$(/usr/bin/identify -format '%h' "$png")
              cols=$(( (w + TILE - 1) / TILE ))
              rows=$(( (h + TILE - 1) / TILE ))
              zmeta="$(jq -c \
                --arg z "$z" \
                --argjson w "$w" \
                --argjson h "$h" \
                --argjson rows "$rows" \
                --argjson cols "$cols" \
                --arg tile "$TILE" \
                '. + [{z:($z|tonumber), width_px:$w, height_px:$h, rows:$rows, cols:$cols, tile_size:($tile|tonumber)}]' \
                <<< "$zmeta")"
            done

            # Write per-map index.json
            name_guess="$(basename "$map_id")"
            jq -n \
              --arg id "$map_id" \
              --arg name "$name_guess" \
              --arg tiles_base "data/tiles/$map_id" \
              --arg minimaps_base "data/minimaps/$map_id" \
              --arg source_dmm "$map_src" \
              --argjson z_levels "$zmeta" \
              '{map_id:$id, name:$name, source_dmm:$source_dmm, tiles_base:$tiles_base, minimaps_base:$minimaps_base, z_levels:$z_levels}' \
              > "$TILE_DIR/$map_id/index.json"
          done

      - name: Build top-level tiles index.json
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          tmp="$TILE_DIR/_maps.json"
          jq -s '.' "$TILE_DIR"/*/index.json > "$tmp"
          jq -n \
            --arg generated "$(date -u +%FT%TZ)" \
            --arg map_glob "$MAP_GLOB" \
            --arg tiles_dir "data/tiles" \
            --arg minimaps_dir "data/minimaps" \
            --arg tile "$TILE" \
            --slurpfile maps "$tmp" \
            '{generated_at:$generated, tile_size:($tile|tonumber), map_glob:$map_glob, tiles_dir:$tiles_dir, minimaps_dir:$minimaps_dir, maps:$maps[0]}' \
            > "$TILE_DIR/index.json"
          rm -f "$tmp"
          head -n 50 "$TILE_DIR/index.json"

      - name: Upload tiles + indexes
        uses: actions/upload-artifact@v4
        with:
          name: aurora-tiles-${{ github.sha }}
          path: |
            data/tiles/**/index.json
            data/tiles/index.json
            data/tiles/**/*.png
          if-no-files-found: error
